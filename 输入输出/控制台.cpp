#include<Windows.h>
#include<conio.h>
#include<stdlib.h>
#ifdef _
#undef _
#endif
#include"小工具/字符串化.hpp"
#include"控制台.hpp"

结构体 匿名字段{
    HANDLE 输出;
    HANDLE 输入;
};

#define 句柄 (*(::匿名字段 *)$D.匿名字段)

命名空间 控制台空间{
    模板<> 数据<>::数据() {
        句柄.输入 = GetStdHandle(STD_INPUT_HANDLE);
        句柄.输出 = GetStdHandle(STD_OUTPUT_HANDLE);
        色彩.前景 = (U08)灰色;
        色彩.背景 = (U08)黑色;
        SetConsoleTextAttribute(句柄.输出, 色彩);
    }
    模板<> 空 接口<>::前景属性结构::运算重载=(控制台颜色 常量 & 值) 常量 {
        $D.色彩.前景 = (U08)值;
        SetConsoleTextAttribute(句柄.输出, $D.色彩);
    }
    模板<> 空 接口<>::背景属性结构::运算重载=(控制台颜色 常量 & 值) 常量 {
        $D.色彩.背景 = (U08)值;
        SetConsoleTextAttribute(句柄.输出, $D.色彩);
    }
    模板<> 接口<>::前景属性结构::运算重载 控制台颜色() 常量 {
        回递 (控制台颜色)$D.色彩.前景;
    }
    模板<> 接口<>::背景属性结构::运算重载 控制台颜色() 常量 {
        回递 (控制台颜色)$D.色彩.背景;
    }
    模板<> 文字 接口<>::读取键() {
        文字     结果[2];
        阿斯克码 缓冲区[3] = { 0 };
        缓冲区[0] = getch();
    
        若 (kbhit()){
            缓冲区[1] = getch();
        }
        若 (缓冲区[0] == '\r') {
            回递 文字('\n');
        }
        若 (缓冲区[0] == 阿斯克码(0xe0) || 缓冲区[0] == 0) {
            回递 文字(0xe000 | U08(缓冲区[1]));
        }
        若 (缓冲区[0] == 阿斯克码(0xe1)) {
            回递 文字(0xe100 | U08(缓冲区[1]));
        }
        MultiByteToWideChar(CP_ACP, 0, 缓冲区, 2, (wchar_t *)结果, 1);
        回递 结果[0];
    }
    模板<> 文字 接口<>::读取键(文字 回显) {
        只要(是){
            文字 值 = 读取键();
            若 (键起点 <= 值 && 值 <= 键终点){
                下轮;
            }
            打印(原始串(回显 == 并回显 ? & 值 : & 回显, 1));
            回递 值;
        }
    }
    模板<> 空 接口<>::打印(I32 值) {
        文字   缓冲区[32];
        原始串 串{
            缓冲区,
            字符串化(缓冲区, 值, 10)
        };
        打印(串);
    }
    模板<> 空 接口<>::打印(I64 值) {
        文字   缓冲区[32];
        原始串 串{
            缓冲区,
            字符串化(缓冲区, 值, 10LL)
        };
        打印(串);
    }
    模板<> 空 接口<哑元结构>::打印(原始串 串) {
        WriteConsoleW(句柄.输出, 串->指针, (DWORD)串->长度, NULL, NULL);
    }
}

控制台 终端;
