#pragma once
#include"基本定义/迷你.hpp"
#include"小工具/局部函数.hpp"

命名空间 大小根堆空间{
    模板<类 序列类型, 类 元素类型>
    空 添加(
        序列类型    常量 & 序列,
        自然数             长度, 
        元素类型    常量 & 值, 
        比较回调<元素类型> 回调 = 比较回调<元素类型>()) {

        序列类型       & 列表 = (序列类型 &)序列;
        内存块<元素类型> 临时 = 值;
        自然数           当前下标 = 长度;
        自然数           父节点下标;

        只要(当前下标 > 0) {
            推导类型 & 父节点 = 列表[
                父节点下标 = (当前下标 - 1) >> 1
            ];

            //父节点比当前要插入的节点小或相等
            若 (回调(父节点, 临时) <= 0) {
                跳出;
            }

            //父节点大于子节点 让父节点替换子节点
            复制(列表[当前下标], 父节点);
            当前下标 = 父节点下标;
        }

        复制(列表[当前下标], 临时);
    }

    模板<类 序列类型, 类 元素类型> 
    推导类型 取出(
        序列类型    常量 & 序列, 
        自然数             长度, 
        元素类型    常量 & 插入, 
        比较回调<元素类型> 回调 = 比较回调<元素类型>()) {

        序列类型       & 列表 = (序列类型 &)序列;
        内存块<元素类型> 首元 = 列表[0];
        自然数           父节点下标 = 0;
        自然数           左节点下标 = 1;

        只要(左节点下标 + 1 < 长度) {
            元素类型 & 左节点 = 列表[左节点下标];
            元素类型 & 右节点 = 列表[左节点下标 + 1];
            元素类型 * 选中点;

            //小根堆 父节点要小于左右节点 所以要找子节点中较小者
            若 (回调(左节点, 右节点) > 0) {
                选中点 = 取址(右节点);
                左节点下标++;
            }
            非{
                选中点 = 取址(左节点);
            }

            //较小的子节点大于等于插入 就不用再下移了
            若 (回调(选中点[0], 插入) >= 0) {
                跳出;
            }

            复制(列表[父节点下标], 选中点[0]);
            父节点下标 = (左节点下标);
            左节点下标 = (左节点下标 << 1) + 1;
        }

        复制(列表[父节点下标], 插入);
        回递 元素类型(首元);
    }
}


