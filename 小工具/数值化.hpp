#pragma once
#include"基本定义/迷你.hpp"
#include"小工具/查找表.hpp"

模板<类 甲>
结构体 数值化结果{
    数值化结果() {
        结果 = 0;
        有效串长 = 0;
        是纯数值串 = 否;
    }
    运算重载 甲() {
        回递 结果;
    }
    推导类型 运算重载 ->() {
        回递 此指针;
    }
    甲     结果;
    自然数 有效串长;
    布尔   是纯数值串;
};

模板<类 值类型, 类 序列类型>
推导类型 数值化(序列类型 常量 & 缓冲区, 自然数 基数) {
    定义 数值化结果<值类型> 结果;
    序列类型 & 序列 = (序列类型 &)缓冲区;
    布尔       是负数 = 否;
    自然数     I = 0;
    自然数     S = 0;
    结果       R;
    推导类型   E = LUT09az[基数 - 1];

    若 (序列[0] == '-'){
        S = I = 1;
        是负数 = 是;
    }
    或 (序列[0] == '+'){
        S = I = 1;
    }

    循环(; 序列[I] != 0; I++) {
        推导类型 V = 序列[I];
        若 (V > E){
            跳出;
        }
        若 ('0' <= V && V <= '9'){
            R.结果 = R.结果 * 基数 + V - '0';
        }
        或 ('a' <= V && V <= 'z'){
            R.结果 = R.结果 * 基数 + V - 'a' + 10;
        }
        或 ('A' <= V && V <= 'Z'){
            R.结果 = R.结果 * 基数 + V - 'A' + 10;
        }
        非{
            跳出;
        }
    }

    若 (S < I){
        若 (是负数){
            R.结果 = 值类型(0) - R.结果;
        }
        R.有效串长 = I;
        R.是纯数值串 = 序列[I] == '\0';
    }
    回递 R;
}

