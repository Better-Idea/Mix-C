#pragma once
#include"基本定义/迷你.hpp"
#include"小工具/断言.hpp"
#include"文字/原始串.hpp"
#include"线性结构/静态向量.hpp"

命名空间 测试{
    文字 缓冲区[100];
    结构体 原始串{
        定义 ::原始串 被测结构;
        标头(左对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->左对齐(10, '-', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
            被测结构 C = A->左对齐(11, u'喵', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
        $

        标头(右对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->右对齐(10, '-', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
            被测结构 C = A->右对齐(11, u'喵', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
        $

        标头(居中对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->居中对齐(12, '-', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
            被测结构 C = A->居中对齐(13, u'喵', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
        $

        标头(长度)
            静态向量<文字, 100> 缓冲区;
            被测结构 A = _"";
            被测结构 B;
            断言(A->长度 == 0);
            断言(B->长度 == 0); //默认就是空串

            循环(自然数 I = 0; I < 缓冲区->长度 - 1; I++) {
                缓冲区[I] = 文字(I + 1);
                缓冲区[I + 1] = '\0';
                A = & 缓冲区[0];
                断言(A->长度 == I + 1, "%zu", I);
            }
        $

        标头(正向匹配)
            静态向量<文字, 100> 缓冲区;
            被测结构 A;
            
            循环(自然数 I = 0; I < 缓冲区->长度 - 1; I++) {
                缓冲区[I] = 文字(I + 1);
                缓冲区[I + 1] = '\0';
                A = & 缓冲区[0];

                循环(自然数 II = 0; II < A->长度; II++) {
                    断言(A->正向匹配(A[II]) == II, "%zu", II);
                }

                断言(A->正向匹配(文字(0xffff)) == 不存在);
            }

            A = _"ABCD";
            断言(A->正向匹配并忽略大小写('a') == 0);
            断言(A->正向匹配并忽略大小写('b') == 1);
            断言(A->正向匹配并忽略大小写('c') == 2);
            断言(A->正向匹配并忽略大小写('d') == 3);

            A = _"";
            断言(A->正向匹配('a')             == 不存在);
            断言(A->正向匹配(_"")             == 不存在);
            断言(A->正向匹配('\0')            == 不存在);

            A = _"1231234";
            断言(A->正向匹配(_"123")          == 0);

            A = _"123456ABC";
            断言(A->正向匹配(_"1")            == 0);
            断言(A->正向匹配(_"123")          == 0);
            断言(A->正向匹配(_"123456ABC")    == 0);
            断言(A->正向匹配(_"56")           == 4);
            断言(A->正向匹配(_"6A")           == 5);
            断言(A->正向匹配(_"C")            == 8);
            断言(A->正向匹配(_"356")          == 不存在);
            断言(A->正向匹配(_"6a")           == 不存在);
            断言(A->正向匹配(_"")             == 不存在);
            断言(A->正向匹配(_"123456ABCD")   == 不存在);
            断言(A->正向匹配(_"456ABCD")      == 不存在);

            断言(A->正向匹配并忽略大小写(_"6a") == 5);
            断言(A->正向匹配并忽略大小写(_"aBc") == 6);


        $
    };
}

