#pragma once
#include"基本定义/迷你.hpp"
#include"小工具/断言.hpp"
#include"文字/原始串.hpp"
#include"线性结构/静态向量.hpp"

命名空间 测试{
    文字 缓冲区[100];
    结构体 原始串{
        定义 ::原始串 被测结构;
        标头(左对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->左对齐(10, '-', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
            被测结构 C = A->左对齐(11, u'喵', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
        $

        标头(右对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->右对齐(10, '-', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
            被测结构 C = A->右对齐(11, u'喵', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
        $

        标头(居中对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->居中对齐(12, '-', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
            被测结构 C = A->居中对齐(13, u'喵', $F[](自然数 长度) {
                缓冲区[长度] = '\0';
                回递 缓冲区;
            });
        $

        标头(长度)
            静态向量<文字, 100> 缓冲区;
            被测结构 A = _"";
            被测结构 B;
            断言(A->长度 == 0);
            断言(B->长度 == 0); //默认就是空串

            循环(自然数 I = 0; I < 缓冲区->长度 - 1; I++) {
                缓冲区[I] = 文字(I + 1);
                缓冲区[I + 1] = '\0';
                A = & 缓冲区[0];
                断言(A->长度 == I + 1, "%zu", I);
            }
        $

        标头(正向匹配)
            静态向量<文字, 100> 缓冲区;
            被测结构 A;
            
            循环(自然数 I = 0; I < 缓冲区->长度 - 1; I++) {
                缓冲区[I] = 文字(I + 1);
                缓冲区[I + 1] = '\0';
                A = & 缓冲区[0];

                循环(自然数 II = 0; II < A->长度; II++) {
                    断言(A->正向匹配(A[II]) == II, "%zu", II);
                }

                断言(A->正向匹配(文字(0xffff)) == 不存在);
            }

            A = _"ABCD";
            断言(A->正向匹配并忽略大小写('a')     == 0);
            断言(A->正向匹配并忽略大小写('b')     == 1);
            断言(A->正向匹配并忽略大小写('c')     == 2);
            断言(A->正向匹配并忽略大小写('d')     == 3);

            A = _"";
            断言(A->正向匹配('a')                 == 不存在);
            断言(A->正向匹配(_"")                 == 不存在);
            断言(A->正向匹配('\0')                == 不存在);

            A = _"1231234";
            断言(A->正向匹配(_"123")              == 0);

            A = _"123456ABC";
            断言(A->正向匹配(_"1")                == 0);
            断言(A->正向匹配(_"123")              == 0);
            断言(A->正向匹配(_"123456ABC")        == 0);
            断言(A->正向匹配(_"56")               == 4);
            断言(A->正向匹配(_"6A")               == 5);
            断言(A->正向匹配(_"C")                == 8);
            断言(A->正向匹配(_"356")              == 不存在);
            断言(A->正向匹配(_"6a")               == 不存在);
            断言(A->正向匹配(_"")                 == 不存在);
            断言(A->正向匹配(_"123456ABCD")       == 不存在);
            断言(A->正向匹配(_"456ABCD")          == 不存在);

            断言(A->正向匹配并忽略大小写(_"6a")   == 5);
            断言(A->正向匹配并忽略大小写(_"aBc")  == 6);

            A = _"123456abz1";
            断言(A->正向匹配(_"6A")               == 不存在);
            断言(A->正向匹配并忽略大小写(_"6a")   == 5);
            断言(A->正向匹配并忽略大小写(_"AbZ1") == 6);

            A = _"编程使我快乐!";
            断言(A->正向匹配(_"编程")             == 0);
            断言(A->正向匹配(_"快乐!")            == 4);

            A = _"什?么?是?西?加?加?,就是在西的基础上加了一些你看不懂但是又觉得很厉害的东西";
            断言(A->正向匹配(_"?是?")             == 3);
        $

        标头(反向匹配)
            被测结构 A = _"AAAAA";
            断言(A->反向匹配('A')                 == 4);
            断言(A->反向匹配(_"AA")               == 3);
            断言(A->反向匹配(_"")                 == 不存在);

            A = _"";
            断言(A->反向匹配('a')                 == 不存在);
            断言(A->反向匹配('\0')                == 不存在);
            断言(A->反向匹配(_"")                 == 不存在);
            
            A = _"12345678aBcDEZ+-*/";
            断言(A->反向匹配(A)                   == 0);
            断言(A->反向匹配(_"1")                == 0);
            断言(A->反向匹配(_"8")                == 7);
            断言(A->反向匹配(_"/")                == A->长度 - 1);
            断言(A->反向匹配(_"aBc")              == 8);
            断言(A->反向匹配(_"aBC")              == 不存在);

            断言(A->反向匹配并忽略大小写(_"AbCd") == 8);
            断言(A->反向匹配并忽略大小写(_"ez+-") == 12);

            A = _"灵魂拷问!!!你爱编程吗?";
            断言(A->反向匹配(_"不爱")             == 不存在);
            断言(A->反向匹配(_"爱")               == 8);

            A = _"对你爱爱爱不完,编程可以天天年年日日月月!";
            断言(A->反向匹配(_"爱")               == 4);
            断言(A->反向匹配(_"月")               == A->长度 - 2);

            A = _"中E混M搭ix,E混就是几年";
            断言(A->反向匹配(_"E混")              == 8);
            断言(A->反向匹配并忽略大小写(_"e混")  == 8);
        $

        标头(等长比较)
            被测结构 A = _"";
            被测结构 B = _"";
            断言(A->等长比较(B, A->长度)          == 等于);
            
            A = _"ABC";
            B = _"ABCD";
            断言(A->等长比较(B, A->长度)          == 等于);

            B = _"ABD";
            断言(A->等长比较(B, A->长度)          == 小于);
            断言(B->等长比较(A, A->长度)          == 大于);
        $

        标头(字典序比较)
            被测结构 A = _"";
            被测结构 B = _"";
            断言(A->字典序比较(B)                 == 等于);

            A = _"1";
            B = _"12";
            断言(A->字典序比较(B)                 == 小于);
            断言(B->字典序比较(A)                 == 大于);

            A = _"";
            断言(A->字典序比较(B)                 == 小于);
            断言(B->字典序比较(A)                 == 大于);

            A = _"ABCDEFGH";
            B = _"ABDDEFGH";
            断言(A->字典序比较(B)                 == 小于);
            断言(B->字典序比较(A)                 == 大于);
            断言(A->字典序比较(A)                 == 等于);

            A = _"ABCDEFGH";
            B = _"ABCDefgh";
            断言(A->字典序比较(B)                 == 小于);
            断言(B->字典序比较(A)                 == 大于);
        $

        标头(快速比较)
            被测结构 A = _"";
            被测结构 B = _"";
            断言(A->快速比较(B)                   == 等于);

            A = _"1";
            B = _"12";
            断言(A->快速比较(B)                   == 小于);
            断言(B->快速比较(A)                   == 大于);

            A = _"";
            断言(A->快速比较(B)                   == 小于);
            断言(B->快速比较(A)                   == 大于);

            A = _"ABCDEFGH";
            B = _"ABDDEFGH";
            断言(A->快速比较(B)                   == 小于);
            断言(B->快速比较(A)                   == 大于);
            断言(A->快速比较(A)                   == 等于);

            A = _"ABCDEFGH";
            B = _"ABCDefgh";
            断言(A->快速比较(B)                   == 小于);
            断言(B->快速比较(A)                   == 大于);
            
            A = _"ABCDEFGH";
            B = _"ABCDefg";
            断言(B->快速比较(A)                   == 小于);
            断言(A->快速比较(B)                   == 大于);
        $
    };
}

