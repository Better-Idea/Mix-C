{
	"make a struct with gc mark" : {
		"prefix" : "xgc",
		"body" : [
			"#ifndef xpack_$1_$2",
			"#define xpack_$1_$2",
			"    #pragma push_macro(\"xuser\")",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2",
			"        #include\"define/base_type.hpp\"",
			"        #include\"macro/xgc.hpp\"",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2{",
			"        xgc(core)",
			"            xgc_fields(",
			"                $3",
			"            );",
			"        public:",
			"            core() = default;",
			"            core(core const &) = default;",
			"        xgc_end();",
			"",
			"        template<class final>",
			"        struct $2 : core {",
			"            using core::core;",
			"",
			"            final $4($5) const {",
			"                return core::$4($6$5);",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"#define xusing_$1_$2     mixc::$1_$2",
			""
		],
		"description" : "make a struct with gc mark"
	},

	"make a template struct with gc mark" : {
		"prefix" : "xgct",
		"body" : [
			"#ifndef xpack_$1_$2",
			"#define xpack_$1_$2",
			"    #pragma push_macro(\"xuser\")",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2",
			"        #include\"define/base_type.hpp\"",
			"        #include\"macro/xgc.hpp\"",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2{",
			"        template<$3>",
			"        xgc(core)",
			"            xgc_fields(",
			"                $5",
			"            );",
			"        public:",
			"            core() = default;",
			"            core(core const &) = default;",
			"        xgc_end();",
			"",
			"        template<class final, $3>",
			"        struct $2 : core<$4> {",
			"            using core<$4>::core;",
			"        };",
			"    }",
			"#endif",
			"",
			"#define xusing_$1_$2     mixc::$1_$2",
			""
		],
		"description" : "make a template struct with gc mark"
	},

	"make a completed struct" : {
		"prefix" : "xstr",
		"body" : [
			"#ifdef xuser",
			"    #ifndef xusing_$1_$2",
			"        #include\"$1/private/$2.hpp\"",
			"    #endif",
			"",
			"    namespace xuser::inc{",
			"        struct $2 : xusing_$1_$2::$2<$2>{",
			"            using xusing_$1_$2::$2<$2>::$2;",
			"        };",
			"    }",
			"    #undef xusing_$1_$2",
			"#endif"
		],
		"description": "make a completed struct"
	},

	"make a completed template struct" : {
		"prefix" : "xstrt",
		"body" : [
			"#ifdef xuser",
			"    #ifndef xusing_$1_$2",
			"        #include\"$1/private/$2.hpp\"",
			"    #endif",
			"",
			"    namespace xuser::inc{",
			"        template<$3>",
			"        struct $2 : xusing_$1_$2::$2<$2<$4>, $4>{",
			"            using xusing_$1_$2::$2<$2<$4>, $4>::$2;",
			"        };",
			"    }",
			"    #undef xusing_$1_$2",
			"#endif"
		],
		"description": "make a completed template struct"
	},

	"make a struct expand" : {
		"prefix" : "xexp",
		"body" : [
			"#ifndef xusing_$1_$2",
			"    #include\"$1/private/$2.hpp\"",
			"#endif",
			"",
			"#ifndef xpack_$1_$2_$3",
			"#define xpack_$1_$2_$3",
			"    #pragma push_macro(\"xuser\")",
			"    #pragma push_macro(\"xusing_$1_$2\")",
			"        #undef  xusing_$1_$2",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2_$3",
			"        #include\"define/base_type.hpp\"",
			"        #include\"$1/$2.hpp\"",
			"    #pragma pop_macro(\"xusing_$1_$2\")",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2_$3{",
			"        struct core : inc::$2{",
			"            using inc::$2::$2;",
            "            using the_t = core<type>;",
			"",
			"            auto $3($4) const {",
			"                $6",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"namespace mixc::$1_$2_$3::xuser{",
			"    template<class final, class type>",
			"    struct $2 : xusing_$1_$2::$2<final> {",
			"        using xusing_$1_$2::$2<final>::$2;",
			"        using the_t = core<type>;",
			"",
			"        final $3($4) const {",
			"            return the.$3($5);",
			"        }",
			"    };",
			"}",
			"",
			"#undef  xusing_$1_$2",
			"#define xusing_$1_$2 ::mixc::$1_$2_$3::xuser",
			""
		],
		"description" : "make a expand struct"
	},

	"make a struct attrbiute expand" : {
		"prefix" : "xexpa",
		"body" : [
			"#ifndef xusing_$1_$2",
			"    #include\"$1/private/$2.hpp\"",
			"#endif",
			"",
			"#ifndef xpack_$1_$2_$3",
			"#define xpack_$1_$2_$3",
			"    #pragma push_macro(\"xuser\")",
			"    #pragma push_macro(\"xusing_$1_$2\")",
			"        #undef  xusing_$1_$2",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2_$3",
			"        #include\"define/base_type.hpp\"",
			"        #include\"$1/$2.hpp\"",
			"    #pragma pop_macro(\"xusing_$1_$2\")",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2_$3{",
			"        struct core : inc::$2{",
			"            using inc::$2::$2;",
            "            using the_t = core<type>;",
			"",
			"            auto $3() const {",
			"                $5",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"namespace mixc::$1_$2_$3::xuser{",
			"    template<class final, class type>",
			"    struct $2 : xusing_$1_$2::$2<final> {",
			"        using xusing_$1_$2::$2<final>::$2;",
			"        using the_t = core<type>;",
			"",
			"        auto $3() const {",
			"            return the.$3();",
			"        }",
			"",
			"        final & $3($4 * result) const {",
			"            result[0] = the.$3();",
			"            return thex;",
			"        }",
			"    };",
			"}",
			"",
			"#undef  xusing_$1_$2",
			"#define xusing_$1_$2 ::mixc::$1_$2_$3::xuser",
			""
		],
		"description" : "make a expand struct"
	},
	

	"make a template struct expand" : {
		"prefix" : "xexpt",
		"body" : [
			"#ifndef xusing_$1_$2",
			"    #include\"$1/private/$2.hpp\"",
			"#endif",
			"",
			"#ifndef xpack_$1_$2_$3",
			"#define xpack_$1_$2_$3",
			"    #pragma push_macro(\"xuser\")",
			"    #pragma push_macro(\"xusing_$1_$2\")",
			"        #undef  xusing_$1_$2",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2_$3",
			"        #include\"define/base_type.hpp\"",
			"        #include\"$1/$2.hpp\"",
			"    #pragma pop_macro(\"xusing_$1_$2\")",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2_$3{",
			"        template<$4>",
			"        struct core : inc::$2<$5> {",
			"            using inc::$2<$5>::$2;",
			"            using the_t = core<$5>;",
			"",
			"            auto $3($6) const {",
			"                $8",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"namespace mixc::$1_$2_$3::xuser{",
			"    template<class final, $4>",
			"    struct $2 : xpub(xusing_$1_$2::$2<final, $5> {",
			"        using xusing_$1_$2::$2<final, $5>::$2",
			"        using the_t = mixc::$1_$2_$3::core<$5>;",
			"",
			"        final $3($6) const {",
			"            return the.$3($7);",
			"        }",
			"    };",
			"}",
			"",
			"#undef  xusing_$1_$2",
			"#define xusing_$1_$2 ::mixc::$1_$2_$3::xuser",
			""
		],
		"description" : "make a expand template struct"
    },

	"make a template struct attrbiute expand" : {
		"prefix" : "xexpat",
		"body" : [
			"#ifndef xusing_$1_$2",
			"    #include\"$1/private/$2.hpp\"",
			"#endif",
			"",
			"#ifndef xpack_$1_$2_$3",
			"#define xpack_$1_$2_$3",
			"    #pragma push_macro(\"xuser\")",
			"    #pragma push_macro(\"xusing_$1_$2\")",
			"        #undef  xusing_$1_$2",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2_$3",
			"        #include\"define/base_type.hpp\"",
			"        #include\"$1/$2.hpp\"",
			"    #pragma pop_macro(\"xusing_$1_$2\")",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2_$3{",
			"        template<$4>",
			"        struct core : inc::$2<$5> {",
			"            using inc::$2<$5>::$2;",
			"            using the_t = core<$5>;",
			"",
			"            auto $3() const {",
			"                $7",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"namespace mixc::$1_$2_$3::xuser{",
			"    template<class final, $4>",
			"    struct $2 : xpub(xusing_$1_$2::$2<final, $5> {",
			"        using xusing_$1_$2::$2<final, $5>::$2",
			"        using the_t = mixc::$1_$2_$3::core<$5>;",
			"",
			"        auto $3() const {",
			"            return the.$3($7);",
			"        }",
			"",
			"        final & $3($6 * result) const {",
			"            $6[0] = the.$3();",
			"            return thex",
			"        }",
			"    };",
			"}",
			"",
			"#undef  xusing_$1_$2",
			"#define xusing_$1_$2 ::mixc::$1_$2_$3::xuser",
			""
		],
		"description" : "make a expand template struct"
    },
    
    "make a interface" : {
		"prefix" : "xitf",
		"body" : [
            "#ifndef xpack_$1_$2",
            "#define xpack_$1_$2",
            "    #pragma push_macro(\"xuser\")",
            "        #undef  xuser",
            "        #define xuser mixc::$1_$2",
            "        #include\"define/base_type.hpp\"",
            "        #include\"macro/xitf.hpp\"",
            "    #pragma pop_macro(\"xuser\")",
            "",
            "    namespace mixc::$1_$2{",
            "        xitf($2)",
            "            xitf_item($4, $5,",
            "                xnt($6)",
            "            );",
            "        xitf_end();",
            "    }",
            "",
            "#endif",
            "",
            "namespace xuser::inc{",
            "    using ::mixc::$1_$2::$2;",
            "}",
            ""
		],
		"description" : "make a interface"
    },

    "make a standard alone struct" : {
		"prefix" : "xaln",
		"body" : [
            "#ifndef xpack_$1_$2",
            "#define xpack_$1_$2",
            "    #pragma push_macro(\"xuser\")",
            "        #undef  xuser",
            "        #define xuser mixc::$1_$2",
            "        #include\"define/base_type.hpp\"",
            "        #include\"macro/xgc.hpp\"",
            "    #pragma pop_macro(\"xuser\")",
            "",
            "    namespace mixc::$1_$2{",
            "        xgc($2)",
            "            xgc_fields(",
            "                $3",
            "            );",
            "",
            "            $2() = default;",
            "        xgc_end();",
            "    }",
            "",
            "#endif",
            "",
            "namespace xuser::inc{",
            "    using ::mixc::$1_$2::$2;",
            "}",
            ""
		],
		"description" : "make a standard alone struct"
	},

	"make a standard alone function" : {
		"prefix" : "xalnf",
		"body" : [
            "#ifndef xpack_$1_$2",
            "#define xpack_$1_$2",
            "    #pragma push_macro(\"xuser\")",
            "        #undef  xuser",
            "        #define xuser mixc::$1_$2",
            "        #include\"define/base_type.hpp\"",
            "    #pragma pop_macro(\"xuser\")",
            "",
			"    namespace mixc::$1_$2{",
			"        $3",
            "    }",
            "",
            "#endif",
            "",
            "namespace xuser::inc{",
            "    using ::mixc::$1_$2::$4;",
            "}",
            ""
		],
		"description" : "make a standard alone function"
    }
}