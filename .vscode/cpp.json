{
	"make a struct with gc mark" : {
		"prefix" : "xgc",
		"body" : [
			"#ifndef xpack_$1_$2",
			"#define xpack_$1_$2",
			"",
			"    #pragma push_macro(\"xuser\")",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2",
			"        #include\"define/base_type.hpp\"",
			"        #include\"macro/xgc.hpp\"",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2{",
			"        xgc(core)",
			"            xgc_fields(",
			"                $3",
			"            );",
			"        public:",
			"            core() = default;",
			"            core(core const &) = default;",
			"            auto $4($5) const {}",
			"        xgc_end();",
			"    }",
			"",
			"    namespace mixc::$1_$2::inc{",
			"        template<class final = core>",
			"        struct $2 : core {",
			"            using core::core;",
			"",
			"            final $4($5) const {",
			"                return core::$4($6$5);",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"namespace xuser::inc{",
			"    using namespace mixc::$1_$2::inc;",
			"}",
			"",
			"#define xusing_$1_$2     mixc::$1_$2::inc",
			""
		],
		"description" : "make a struct with gc mark"
	},

	"make a template struct with gc mark" : {
		"prefix" : "xgct",
		"body" : [
			"#ifndef xpack_$1_$2",
			"#define xpack_$1_$2",
			"",
			"    #pragma push_macro(\"xuser\")",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2",
			"        #include\"define/base_type.hpp\"",
			"        #include\"macro/xgc.hpp\"",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2{",
			"        template<$3>",
			"        xgc(core, xtmpl($4))",
			"            xgc_fields(",
			"                $5",
			"            );",
			"        public:",
			"            core() = default;",
			"            core(core const &) = default;",
			"",
			"            template<class expand>",
			"            core(expand const & self) : ", 
			"                core((core &)(expand &)self) {",
			"            }",
			"",
			"            auto $6($7) const {}",
			"        xgc_end();",
			"    }",
			"",
			"    namespace mixc::$1_$2::inc{",
			"        template<$3, class final = core<$4>>",
			"        struct $2 : core<$4> {",
			"            using core<$4>::core;",
			"",
			"            final $6($7) const {",
			"                return core<$4>::$6($7);",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"namespace xuser::inc{",
			"    using namespace mixc::$1_$2::inc;",
			"}",
			"",
			"#define xusing_$1_$2     mixc::$1_$2::inc",
			""
		],
		"description" : "make a template struct with gc mark"
	},

	"make a completed struct" : {
		"prefix" : "xstr",
		"body" : [
			"#ifdef xuser",
			"    #ifndef xusing_$1_$2",
			"        #include\"$1/$2/$2.hpp\"",
			"    #endif",
			"",
			"    namespace xuser::inc{",
			"        struct $2 : xusing_$1_$2::$2<$2>{",
			"            using xusing_$1_$2::$2<$2>::$2;",
			"        };",
			"    }",
			"#endif",			
		],
		"description": "make a completed struct",
	},

	"make a completed template struct" : {
		"prefix" : "xstrt",
		"body" : [
			"#ifdef xuser",
			"    #ifndef xusing_$1_$2",
			"        #include\"$1/$2/$2.hpp\"",
			"    #endif",
			"",
			"    namespace xuser::inc{",
			"        template<$3>",
			"        struct $2 : xusing_$1_$2::$2<$4, $2<$4>>{",
			"            using xusing_$1_$2::$2<$4, $2<$4>>;",
			"        };",
			"    }",
			"#endif",			
		],
		"description": "make a completed template struct",
	},

	"make a struct expand" : {
		"prefix" : "xexp",
		"body" : [
			"#ifndef xusing_$1_$2",
			"    #include\"$1/$2/$2.hpp\"",
			"#endif",
			"",
			"#ifndef xpack_$1_$2_$3",
			"#define xpack_$1_$2_$3",
			"    #pragma push_macro(\"xuser\")",
			"    #pragma push_macro(\"xusing_$1_$2\")",
			"        #undef  xusing_$1_$2",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2_$3",
			"        #include\"define/base_type.hpp\"",
			"        #include\"memop/cast.hpp\"",
			"        #include\"$1/$2.hpp\"",
			"    #pragma pop_macro(\"xusing_$1_$2\")",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2_$3{",
			"        struct $2 : inc::$2::partial {",
			"            auto $3($4) const {",
			"                inc::$2 & self = xthe;",
			"                return;",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"namespace xuser::$1_$2_$3{",
			"    namespace cur{",
			"        using namespace mixc::$1_$2_$3;",
			"    }",
			"    namespace inc{",
			"        using namespace cur::inc;",
			"    }",
			"",
			"    template<class final>",
			"    struct $2 : xusing_$1_$2::$2<final> {",
			"        using xusing_$1_$2::$2<final>::$2;",
			"        using fun = cur::$2;",
			"",
			"        final $3($4) const {",
			"            return inc::cast<fun>(xthe).$3($4);",
			"        }",
			"    };",
			"}",
			"",
			"#undef  xusing_$1_$2",
			"#define xusing_$1_$2 xuser::$1_$2_$3",
			""
		],
		"description" : "make a expand struct"
	},
	

	"make a template struct expand" : {
		"prefix" : "xexpt",
		"body" : [
			"#ifndef xusing_$1_$2",
			"    #include\"$1/$2/$2.hpp\"",
			"#endif",
			"",
			"#ifndef xpack_$1_$2_$3",
			"#define xpack_$1_$2_$3",
			"    #pragma push_macro(\"xuser\")",
			"    #pragma push_macro(\"xusing_$1_$2\")",
			"        #undef  xusing_$1_$2",
			"        #undef  xuser",
			"        #define xuser mixc::$1_$2_$3",
			"        #include\"define/base_type.hpp\"",
			"        #include\"memop/cast.hpp\"",
			"        #include\"$1/$2.hpp\"",
			"    #pragma pop_macro(\"xusing_$1_$2\")",
			"    #pragma pop_macro(\"xuser\")",
			"",
			"    namespace mixc::$1_$2_$3{",
			"        template<$4>",
			"        struct $2 : inc::$2<$5>::partial {",
			"            auto $3($6) const {",
			"                inc::$2<$5> & self = xthe;",
			"                return;",
			"            }",
			"        };",
			"    }",
			"#endif",
			"",
			"namespace xuser::$1_$2_$3{",
			"    namespace cur{",
			"        using namespace mixc::$1_$2_$3;",
			"    }",
			"    namespace inc{",
			"        using namespace cur::inc;",
			"    }",
			"",
			"    template<$4, class final>",
			"    struct $2 : xusing_$1_$2::$2<$5, final> {",
			"        using xusing_$1_$2::$2<$5, final>::$2;",
			"        using fun = cur::$2<$5>;",
			"",
			"        final $3($6) const {",
			"            return inc::cast<fun>(xthe).$3($6);",
			"        }",
			"    };",
			"}",
			"",
			"#undef  xusing_$1_$2",
			"#define xusing_$1_$2 xuser::$1_$2_$3",
			""
		],
		"description" : "make a expand template struct"
    },
    
    "make a interface" : {
		"prefix" : "xitf",
		"body" : [
            "#ifndef xpack_$1_$2",
            "#define xpack_$1_$2",
            "    #pragma push_macro(\"xuser\")",
            "        #undef  xuser",
            "        #define xuser mixc::$1_$2",
            "        #include\"define/base_type.hpp\"",
            "        #include\"macro/xitf.hpp\"",
            "    #pragma pop_macro(\"xuser\")",
            "",
            "    namespace mixc::$1_$2{",
            "        xitf($2, xtmpl($3))",
            "            xitf_item($4, $5,",
            "                xnt($6)",
            "            );",
            "        xitf_end();",
            "    }",
            "",
            "#endif",
            "",
            "namespace xuser::inc{",
            "    using namespace mixc::$1_$2;",
            "}",
            ""            
		],
		"description" : "make a interface"
    },

    "make a standard alone struct" : {
		"prefix" : "xaln",
		"body" : [
            "#ifndef xpack_$1_$2",
            "#define xpack_$1_$2",
            "    #pragma push_macro(\"xuser\")",
            "        #undef  xuser",
            "        #define xuser mixc::$1_$2",
            "        #include\"define/base_type.hpp\"",
            "        #include\"macro/xgc.hpp\"",
            "    #pragma pop_macro(\"xuser\")",
            "",
            "    namespace mixc::$1_$2{",
            "        xgc($2)",
            "            xgc_fields(",
            "                $3",
            "            );",
            "",
            "            $2() = default;",
            "        xgc_end();",
            "    }",
            "",
            "#endif",
            "",
            "namespace xuser::inc{",
            "    using namespace mixc::$1_$2;",
            "}",
            ""
		],
		"description" : "make a standard alone struct"
	},

	"make a standard alone function" : {
		"prefix" : "xalnf",
		"body" : [
            "#ifndef xpack_$1_$2",
            "#define xpack_$1_$2",
            "    #pragma push_macro(\"xuser\")",
            "        #undef  xuser",
            "        #define xuser mixc::$1_$2",
            "        #include\"define/base_type.hpp\"",
            "    #pragma pop_macro(\"xuser\")",
            "",
			"    namespace mixc::$1_$2{",
			"        $3",
            "    }",
            "",
            "#endif",
            "",
            "namespace xuser::inc{",
            "    using namespace mixc::$1_$2;",
            "}",
            ""
		],
		"description" : "make a standard alone function"
    }
}