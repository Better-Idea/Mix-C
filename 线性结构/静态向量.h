#pragma once
#include"基本定义/属性范式.h"

命名空间 静态向量空间{
    三体(类 类型, 自然数 元素个数);

    模板<类 类型, 自然数 元素个数> 结构体 数据{
        卡诺匹斯(类型, 元素个数);
        类型 元素[元素个数];
        数据() {}

        模板<类 ... 元素列表>
        数据(元素列表 常量 & ...列表) : 
            元素{ (元素列表 & ...)列表... }{
        }
    };

    模板<类 类型, 自然数 元素个数> 结构体 接口{
        卡诺匹斯(类型, 元素个数);
        结构体 迭代器{
            迭代器(){}
            迭代器(数据类型 * 元, 自然数 下标):
                元(元), 下标(下标){
            }
            布尔 未达尾元() {
                回递 下标 < 元素个数;
            }
            运算重载 类型 &(){
                回递 元->元素[下标];
            }
            推导类型 运算重载->(){
                回递 元->元素 + 下标;
            }
            空 运算重载 = (迭代器 常量 & 值){
                复制(此, 值);
            }
            迭代器 下一个() {
                回递 迭代器(元, 下标 + 1);
            }
            自然数 常量 下标;
        保护
            数据类型 *  元;
        };
        结构体 反迭代器 : 迭代器{
            反迭代器() {}
            反迭代器(数据类型 * 元, 自然数 下标):
                迭代器(元, 下标){
            }
            布尔 未达尾元() {
                回递 整数(下标) > -1;
            }
            运算重载 类型 &(){
                回递 元->元素[下标];
            }
            推导类型 运算重载->(){
                回递 元->元素 + 下标;
            }
            空 运算重载 = (反迭代器 常量 & 值){
                复制(此, 值);
            }
            反迭代器 下一个() {
                回递 反迭代器(元, 下标 - 1);
            }
        };
        迭代器 正遍历器(自然数 起始下标 = 0) {
            回递 迭代器(& $D, 起始下标);
        }
        反迭代器 反遍历器(自然数 起始下标 = 元素个数 - 1) {
            回递 反迭代器(& $D, 起始下标);
        }
        只读属性(自然数, 长度){
            回递 元素个数;
        }
    };

    模板<类 类型, 自然数 元素个数> 结构体 运算{
        运算型卡诺匹斯(类型, 元素个数);
        类型 & 运算重载[](自然数 下标) 常量 {
            回递 $D.元素[下标];
        }
    };

    模板<类 类型, 类 ... 元素列表>
    符号常量 自然数 参数个数(类型 常量 & 首参, 元素列表 常量 & ...列表) {
        回递 1 + 参数数(元素列表);
    }
    模板<类 类型, 类 ... 元素列表>
    符号常量 类型 首参类型(类型 常量 & 首参, 元素列表 常量 & ...列表) {
        回递 首参;
    }
}

模板<类 类型, 自然数 第一维长度, 自然数 ... 剩余维数长度>
结构体 静态向量;

模板<类 类型, 自然数 第一维长度, 自然数 ... 剩余维数长度>
结构体 静态向量 : 静态向量<静态向量<类型, 剩余维数长度...>, 第一维长度>{
    定义 静态向量<静态向量<类型, 剩余维数长度...>, 第一维长度> 父类;
    模板<类 ... 元素列表>
    静态向量(元素列表 常量 & ...列表) :
        父类(列表...) {
    }
};

模板<类 类型, 自然数 第一维长度>
结构体 静态向量<类型, 第一维长度> : 静态向量空间::运算<类型, 第一维长度> {
    定义 类型 本级;
    模板<类 ... 元素列表>
    静态向量(元素列表 常量 & ...列表) :
        数据 { 列表... }{
    }
私有
    静态向量空间::数据<类型, 第一维长度> 数据;
};

模板<类 类型, 类 ... 参数>
静态向量<类型, 1 + 参数数(参数)> $V(类型 常量 & 首参, 参数 常量 & ... 列表) {
    回递 静态向量<类型, 1 + 参数数(参数)>(首参, 列表...);
}