#pragma once
#include"基本定义/迷你.h"
#include"小工具/断言.h"
#include"数学/随机数.h"

命名空间 迷你{
    结构体 测试{
        静态 空 测试所有() {
            测试::分配回收();
            测试::传递优化();
        }
        标头(分配回收);
            结构体 记录{
                空指针 内存;
                自然数 大小;
            };
            外部链接 自然数 实际分配字节数();
            符号常量 自然数 长度 = 1000 * 10000;
            静态 记录 F[长度] {  };
            U32 I = 0;
            U32 J = 0;
            随机数 R;
            只要(I < 长度) {
                若 (R->取值小于<U08>(3) || I == 0){
                    记录 T;
                    T.内存 = 分配<U08>(T.大小 = R->取值介于<U16>(1, 512), [](U08 * 序列, 自然数 下标) {
                        序列[下标] = 0xff; //写脏
                    });
                    F[I] = T;
                    I++;
                }
                非{
                    J = R->取值小于<U32>(I);
                    I--;
                    交换(F[I], F[J]);
                    回收(F[I].内存, F[I].大小);
                }
            }
            只要(I-- != 0) {
                回收(F[I].内存, F[I].大小);
            }
            断言(实际分配字节数() == 0, "%llu", 实际分配字节数());
        $

        标头(传递优化);
            结构体 A{
                静态 空 传递(::传递优化<U08> 常量 & 值) {
                    U08 * 内存;
                    值.传递给(内存);
                    回收(内存);
                }
                静态 ::传递优化<U08> 传递() {
                    回递 分配<U08>();
                }
            };

            { 
                ::传递优化<U08> A = 分配<U08>(); 
            }
            断言(已分配字节数() == 0);

            { 
                A::传递();
            }
            断言(已分配字节数() == 0);

            { 
                推导类型 && 临时 = A::传递();
                断言(已分配字节数() != 0);
            }
            断言(已分配字节数() == 0);

            { 
                推导类型 临时 = A::传递();
                断言(已分配字节数() != 0);
            }
            断言(已分配字节数() == 0);

            {
                A::传递(分配<U08>());
            }
            断言(已分配字节数() == 0);
        $
    };
}