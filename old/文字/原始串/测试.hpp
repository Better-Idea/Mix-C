#pragma once
#include"基本定义/迷你.hpp"
#include"小工具/断言.hpp"
#include"文字/原始串.hpp"
#include"线性结构/静态向量.hpp"
#define 串分配             \
$F[](自然数 长度) {        \
    缓冲区[长度] = '\0';   \
    回递 缓冲区;           \
}

命名空间 测试{
    文字 缓冲区[100];
    结构体 原始串{
        定义 ::原始串 被测结构;
        标头(左对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->左对齐(10, '-', 串分配);
            被测结构 C = A->左对齐(11, u'喵', 串分配);
        $

        标头(右对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->右对齐(10, '-', 串分配);
            被测结构 C = A->右对齐(11, u'喵', 串分配);
        $

        标头(居中对齐)
            被测结构 A = _"你好世界";
            被测结构 B = A->居中对齐(12, '-', 串分配);
            被测结构 C = A->居中对齐(13, u'喵', 串分配);
        $
   
        标头(截取)
            被测结构 A = _"0123456789abcdef";
            断言(A == A->截取(0, -1, 串分配));
            断言(_"123456789abcdef" == A->截取(1, -1, 串分配));
            断言(_"f" == A->截取(-1, -1, 串分配));
            断言(_"123" == A->截取(1, 3, 串分配));
            断言(_"321" == A->截取(3, 1, 串分配));
            断言(_"3456789abcde" == A->截取(3, -2, 串分配));
        $

        标头(函数运算重载)
            被测结构 A = _"0123456789";
            断言(_"1" == A(1, 1, 串分配));
            断言(_"12" == A(1, 2, 串分配));
            断言(_"123456789" == A(1, A->长度 - 1, 串分配));
            断言(_"123456789" == A(1, -1, 串分配));
            断言(_"76543210" == A(-3, 0, 串分配));
        $

        标头(插入)
            被测结构 A = _"";
            断言(_"" == A->插入(0, _"", 串分配));
            断言(_"123" == A->插入(0, _"123", 串分配));

            A = _"123";
            断言(_"A123" == A->插入(0, _"A", 串分配));
            断言(_"1A23" == A->插入(1, _"A", 串分配));
            断言(_"12A3" == A->插入(2, _"A", 串分配));
            断言(_"123A" == A->插入(3, _"A", 串分配));
            断言(_"A123" == A->插入(-4, _"A", 串分配));
            断言(_"1A23" == A->插入(-3, _"A", 串分配));
            断言(_"12A3" == A->插入(-2, _"A", 串分配));
            断言(_"123A" == A->插入(-1, _"A", 串分配));
        $

        标头(反序)
            被测结构 A = _"";
            断言(_"" == A->反序(串分配));

            A = _"1";
            断言(_"1" == A->反序(串分配));

            A = _"12";
            断言(_"21" == A->反序(串分配));

            A = _"123";
            断言(_"321" == A->反序(串分配));

            A = _"1234";
            断言(_"4321" == A->反序(串分配));

            A = _"12345";
            断言(_"54321" == A->反序(串分配));
        $

        标头(清除串首)
            被测结构 A = _"";
            断言(_""      == A->清除串首('A'));

            A = _"  123";
            断言(_"123"   == A->清除串首(' '));
            断言(_"  123" == A->清除串首('1'));
            断言(_"3"     == A->清除串首(' ', '1', '2'));
            断言(_""      == A->清除串首(' ', '1', '2', '3'));
        $

        标头(清除串尾)
            被测结构 A = _"";
            断言(_""      == A->清除串尾(' '));

            A = _"123  ";
            断言(_"123"   == A->清除串尾(' '));
            断言(_"123  " == A->清除串尾('3'));
            断言(_"123"   == A->清除串尾(' ', '1', '2'));
            断言(_"1"     == A->清除串尾(' ', '3', '2'));
            断言(_""      == A->清除串尾(' ', '1', '2', '3'));
        $

        标头(长度)
            静态向量<文字, 100> 缓冲区;
            被测结构 A = _"";
            被测结构 B;
            断言(A->长度 == 0);
            断言(B->长度 == 0); //默认就是空串

            循环(自然数 I = 0; I < 缓冲区->长度 - 1; I++) {
                缓冲区[I] = 文字(I + 1);
                缓冲区[I + 1] = '\0';
                A = & 缓冲区[0];
                断言(A->长度 == I + 1, "%zu", I);
            }
        $

        标头(正向匹配)
            静态向量<文字, 100> 缓冲区;
            被测结构 A;
            
            循环(自然数 I = 0; I < 缓冲区->长度 - 1; I++) {
                缓冲区[I] = 文字(I + 1);
                缓冲区[I + 1] = '\0';
                A = & 缓冲区[0];

                循环(自然数 II = 0; II < A->长度; II++) {
                    断言(A->正向匹配(A[II]) == II, "%zu", II);
                }

                断言(A->正向匹配(文字(0xffff)) == 不存在);
            }

            A = _"ABCD";
            断言(A->正向匹配('a', 忽略大小写)     == 0);
            断言(A->正向匹配('b', 忽略大小写)     == 1);
            断言(A->正向匹配('c', 忽略大小写)     == 2);
            断言(A->正向匹配('d', 忽略大小写)     == 3);

            A = _"";
            断言(A->正向匹配('a')                 == 不存在);
            断言(A->正向匹配(_"")                 == 不存在);
            断言(A->正向匹配('\0')                == 不存在);

            A = _"1231234";
            断言(A->正向匹配(_"123")              == 0);

            A = _"123456ABC";
            断言(A->正向匹配(_"1")                == 0);
            断言(A->正向匹配(_"123")              == 0);
            断言(A->正向匹配(_"123456ABC")        == 0);
            断言(A->正向匹配(_"56")               == 4);
            断言(A->正向匹配(_"6A")               == 5);
            断言(A->正向匹配(_"C")                == 8);
            断言(A->正向匹配(_"356")              == 不存在);
            断言(A->正向匹配(_"6a")               == 不存在);
            断言(A->正向匹配(_"")                 == 不存在);
            断言(A->正向匹配(_"123456ABCD")       == 不存在);
            断言(A->正向匹配(_"456ABCD")          == 不存在);

            断言(A->正向匹配(_"6a", 忽略大小写)   == 5);
            断言(A->正向匹配(_"aBc", 忽略大小写)  == 6);

            A = _"123456abz1";
            断言(A->正向匹配(_"6A")               == 不存在);
            断言(A->正向匹配(_"6a", 忽略大小写)   == 5);
            断言(A->正向匹配(_"AbZ1", 忽略大小写) == 6);

            A = _"编程使我快乐!";
            断言(A->正向匹配(_"编程")             == 0);
            断言(A->正向匹配(_"快乐!")            == 4);

            A = _"什?么?是?西?加?加?,就是在西的基础上加了一些你看不懂但是又觉得很厉害的东西";
            断言(A->正向匹配(_"?是?")             == 3);

            自然数   I[] = { 0, 5, 10, 15 };
            自然数 * P = I;
            A = _"1234A1234B1234C123451";
            A->正向匹配(_"12", $F[&](自然数 下标) {
                断言(下标 == P[0], "%zu", P - I);
                P += 1;
                回递 继续;
            });
            断言(P - I == 4);
        $

        标头(反向匹配)
            被测结构 A = _"AAAAA";
            断言(A->反向匹配('A')                 == 4);
            断言(A->反向匹配(_"AA")               == 3);
            断言(A->反向匹配(_"")                 == 不存在);

            A = _"";
            断言(A->反向匹配('a')                 == 不存在);
            断言(A->反向匹配('\0')                == 不存在);
            断言(A->反向匹配(_"")                 == 不存在);
            
            A = _"12345678aBcDEZ+-*/";
            断言(A->反向匹配(A)                   == 0);
            断言(A->反向匹配(_"1")                == 0);
            断言(A->反向匹配(_"8")                == 7);
            断言(A->反向匹配(_"/")                == A->长度 - 1);
            断言(A->反向匹配(_"aBc")              == 8);
            断言(A->反向匹配(_"aBC")              == 不存在);

            断言(A->反向匹配(_"AbCd", 忽略大小写) == 8);
            断言(A->反向匹配(_"ez+-", 忽略大小写) == 12);

            A = _"灵魂拷问!!!你爱编程吗?";
            断言(A->反向匹配(_"不爱")             == 不存在);
            断言(A->反向匹配(_"爱")               == 8);

            A = _"对你爱爱爱不完,编程可以天天年年日日月月!";
            断言(A->反向匹配(_"爱")               == 4);
            断言(A->反向匹配(_"月")               == A->长度 - 2);

            A = _"中E混M搭ix,E混就是几年";
            断言(A->反向匹配(_"E混")              == 8);
            断言(A->反向匹配(_"e混", 忽略大小写)  == 8);

            
            自然数   I[] = { 15, 10, 5, 0 };
            自然数 * P = I;
            A = _"1234A1234B1234C123451";
            A->反向匹配(_"12", $F[&](自然数 下标) {
                断言(下标 == P[0], "%zu", P - I);
                P += 1;
                回递 继续;
            });
            断言(P - I == 4);
        $

        标头(等长比较)
            被测结构 A = _"";
            被测结构 B = _"";
            断言(A->等长比较(B, A->长度)          == 等于);
            
            A = _"ABC";
            B = _"ABCD";
            断言(A->等长比较(B, A->长度)          == 等于);

            B = _"ABD";
            断言(A->等长比较(B, A->长度)          == 小于);
            断言(B->等长比较(A, A->长度)          == 大于);
        $

        标头(字典序比较)
            被测结构 A = _"";
            被测结构 B = _"";
            断言(A->字典序比较(B)                 == 等于);

            A = _"1";
            B = _"12";
            断言(A->字典序比较(B)                 == 小于);
            断言(B->字典序比较(A)                 == 大于);

            A = _"";
            断言(A->字典序比较(B)                 == 小于);
            断言(B->字典序比较(A)                 == 大于);

            A = _"ABCDEFGH";
            B = _"ABDDEFGH";
            断言(A->字典序比较(B)                 == 小于);
            断言(B->字典序比较(A)                 == 大于);
            断言(A->字典序比较(A)                 == 等于);

            A = _"ABCDEFGH";
            B = _"ABCDefgh";
            断言(A->字典序比较(B)                 == 小于);
            断言(B->字典序比较(A)                 == 大于);
        $

        标头(快速比较)
            被测结构 A = _"";
            被测结构 B = _"";
            断言(A->快速比较(B)                   == 等于);

            A = _"1";
            B = _"12";
            断言(A->快速比较(B)                   == 小于);
            断言(B->快速比较(A)                   == 大于);

            A = _"";
            断言(A->快速比较(B)                   == 小于);
            断言(B->快速比较(A)                   == 大于);

            A = _"ABCDEFGH";
            B = _"ABDDEFGH";
            断言(A->快速比较(B)                   == 小于);
            断言(B->快速比较(A)                   == 大于);
            断言(A->快速比较(A)                   == 等于);

            A = _"ABCDEFGH";
            B = _"ABCDefgh";
            断言(A->快速比较(B)                   == 小于);
            断言(B->快速比较(A)                   == 大于);
            
            A = _"ABCDEFGH";
            B = _"ABCDefg";
            断言(B->快速比较(A)                   == 小于);
            断言(A->快速比较(B)                   == 大于);
        $
    };
}

#undef 串分配

