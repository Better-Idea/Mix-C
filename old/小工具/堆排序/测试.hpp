#pragma once
#include"基本定义/迷你.hpp"
#include"小工具/断言.hpp"
#include"小工具/堆排序.hpp"
#include"线性结构/静态向量.hpp"
#include"数学/随机数.hpp"
#include<algorithm>

命名空间 测试{
    标头(堆排序)
        定义 静态向量<U32, 50> 序列;
        序列 用例 = { 0u };
        序列 甲;
        序列 乙;
        U32  上限 = 1;
        U32  最大位数 = 8;

        推导类型 校验 = [&](U32 总位数) {
            循环(U32 II = 1; II < 总位数; II++) {
                复制(& 甲[0], & 用例[0], II);
                复制(& 乙[0], & 用例[0], II);

                ::堆排序(甲, II);
                std::sort(& 乙[0], & 乙[II]);

                循环(U32 III = 0; III < II; III++) {
                    断言(甲[III] == 乙[III]) {
                        展示(用例);
                        展示(甲);
                        展示(乙);
                    }
                }
            }
        };

        循环(U32 I = 0; I < 最大位数; I++) {
            上限 *= 10;
        }

        循环(U32 I = 0; I < 上限; I++) {
            循环(U32 II = I, III = 0; II != 0; III++) {
                用例[III] = II % 10;
                II /= 10;
            }
            校验(最大位数);
        }

        随机数 变数;
        循环(U32 I = 0; I < 1000 * 1000; I++) {
            循环(U32 II = 0; II < 用例->长度; II++) {
                用例[II] = 变数;
            }
            最大位数 = 变数->取值小于<U32>(用例->长度);
            校验(最大位数);
        }
    $
}