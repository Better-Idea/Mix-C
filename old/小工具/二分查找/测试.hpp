#pragma once
#include"小工具/断言.hpp"
#include"小工具/二分查找.hpp"
#include"线性结构/静态向量.hpp"
#include"线性结构/静态位向量.hpp"

命名空间 测试{
    标头(二分查找);
        枚举 状态{
            和前位相等,
            比前位大,
        };
        定义 静态向量<U32, 20>    序列;
        定义 静态位向量<32, 状态> 位序列;

        序列     用例 = { 0u };
        U32      当前 = 0;
        位序列 & 位组 = 转换<U32, 位序列>(当前);
        自然数   用例数 = 1 << 用例->长度;

        开始处{
            //生成用例
            循环(U32 I = 0, C = 1; I < 用例->长度; I++) {
                若 (位组[I] == 比前位大) {
                    用例[I] = ++C;
                }
                非{
                    用例[I] = C;
                }
            }

            //对比测试
            循环(U32 长度 = 0; 长度 <= 用例->长度; 长度++) {
                循环(U32 比对值 = 0; 比对值 <= 用例->长度 + 1; 比对值++) {
                    自然数 A = ::二分查找(用例, 长度, 比对值)->刚好匹配();
                    自然数 B = ::二分查找(用例, 长度, 比对值)->向上匹配(); //如果没有刚好匹配 则会匹配小于但尽量接近比对值
                    自然数 C = ::二分查找(用例, 长度, 比对值)->向下匹配(); //如果没有刚好匹配 则会匹配大于但尽量接近比对值
                    自然数 I;

                    若 (长度 == 0) {
                        断言(A == 不存在, "实际下标:%zu", A);
                        断言(B == 不存在, "实际下标:%zu", B);
                        断言(C == 不存在, "实际下标:%zu", C);
                        下轮;
                    }

                    若 (A == 不存在) {
                        循环(I = 0; I < 长度; I++) {
                            断言(用例[I] != 比对值, "满足下标:%zu 比对值:%u", I, 比对值) {
                                展示(用例);
                            }
                        }
                    }
                    非{
                        断言(用例[A] == 比对值, "异常下标:%zu", A, 比对值) {
                            展示(用例);
                        }
                    }

                    循环(I = 0; ; I++) {
                        若 (用例[I] < 比对值){
                            若 (I + 1 == 长度){
                                跳出;
                            }
                            下轮;
                        }
                        若 (用例[I] > 比对值){
                            I = I - 1;
                        }
                        跳出;
                    }

                    断言(B == I || 用例[B] == 用例[I]) {
                        展示(用例);
                    }

                    循环(I = 长度; ; ) {
                        I -= 1;
                        若 (用例[I] > 比对值){
                            若 (I == 0) {
                                跳出;
                            }
                            下轮;
                        }
                        若 (用例[I] < 比对值){
                            I = I + 1;
                            若 (I == 长度) {
                                I = 不存在;
                            }
                        }
                        跳出;
                    }

                    断言(C == I || 用例[C] == 用例[I]) {
                        展示(用例);
                    }
                }
            }

            当前 += 1;
        }只要(当前 < 用例数);
    $
};