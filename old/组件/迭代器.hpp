#pragma once
#include"基本定义/迷你.hpp"

命名空间 迭代器空间{
    模板<类 接口类型>
    结构体 结构{
        定义 类型名称 接口类型::数据类型 数据类型;
        定义 类型名称 接口类型::运算类型 运算类型;
        定义 类型名称 数据类型::接口类型 结构类型;

        结构() : 结构(空值, 0){}
        结构(接口类型 & 对象, 自然数 下标, 自然数 边界):
            I(取址(对象)), 下标(下标), 边界(边界){
        }
        布尔 未达边界() {
            回递 下标 != 边界;
        }
        自然数 常量 下标;
        自然数      边界;
    保护
        数据类型 & 此数据(){
            回递 D[0];
        }
        接口类型 & 此接口(){
            回递 I[0];
        }
        运算类型 & 此运算(){
            回递 O[0];
        }
    私有
        联合体{
            数据类型 * D;
            接口类型 * I;
            运算类型 * O;
        };
    };
}

#define 此迭代器(模式)                                          \
结构体 模式 ## 迭代器 : 迭代器空间::结构<接口类型>{             \
    模式 ## 迭代器() {}                                         \
    模式 ## 迭代器(接口类型 & 对象, 自然数 下标, 自然数 边界):  \
        迭代器空间::结构<接口类型>(对象, 下标, 边界){           \
    }                                                           \
    空 运算重载 = (模式 ## 迭代器 常量 & 值){                   \
        复制(此, 值);                                           \
    }


