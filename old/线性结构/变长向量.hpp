#pragma once
#include"指令集/基础.hpp"
#include"基本定义/属性范式.hpp"

命名空间 变长向量空间 {
    三体(类 元素类型, 自然数 页长度);
    模板<类 元素类型, 自然数 页长度>
    结构体 数据 {
        卡诺匹斯(元素类型, 页长度);
        自然数     长度;
        元素类型 * 页表[页长度];

        数据() {
            长度 = 0;
        }

        模板<类 ... 参数>
        数据(参数 常量 & ... 列表) {
            长度 = 0;
            $I.后端放入(列表...);
        }
        
        ~数据() {
            自然数     页下标;
            自然数     下标;
            自然数     个数;
            元素类型 * 页;
            页下标 = 指令集::最高置位位索引(长度);

            若 (页下标 == 不存在){
                回递;
            }

            个数 = 长度;
            页 = 页表[页下标 + 1];
            指令集::位测试后位复位(个数, 页下标);

            若 (个数) {
                循环(下标 = 0; 下标 < 个数; 下标++) {
                    页[下标].~元素类型();
                }
                个数 = 自然数(1) << 页下标;
                回收(页, 个数 * 空间量(元素类型));
            }
            非 {
                个数 = 自然数(1) << 页下标;
            }
            只要(个数 >>= 1) {
                循环(页 = 页表[页下标--], 下标 = 0; 下标 < 个数; 下标++) {
                    页[下标].~元素类型();
                }
                回收(页, 个数 * 空间量(元素类型));
            }
            页 = 页表[0];
            回收(页);
        }
    };

    模板<类 元素类型, 自然数 页长度>
    结构体 接口 {
        卡诺匹斯(元素类型, 页长度)
        私有只读(元素类型 **, 页表)
            回递 $D.页表;
        $

        私有只读(布尔, 到达页表交界处)
            回递 指令集::置位位个数(长度) == 1;
        $

        公有只读(自然数, 容量)
            自然数 下标;
            自然数 最大页长度 = 0;
            下标 = 指令集::最高置位位索引($I.长度);

            若 (下标 == 不存在) {
                回递 0;
            }

            指令集::位测试后位置位(最大页长度, 下标);

            若 (最大页长度 == $I.长度){
                回递 最大页长度;
            }
            回递 最大页长度 << 1;
        $

        公有只读(布尔, 未空)
            回递 $I.长度 != 0;
        $

        公有只读(布尔, 已空)
            回递 !$I.未空;
        $
    公有
        属性(自然数, 长度)
            公有读 { 回递 $D.长度; }
            私有写 { $D.长度 = 值; }
        $

        属性(元素类型 &, 首元)
            公有读 { 回递 $D.页表[0][0]; }
            公有写 { $D.页表[0][0] = 值; }
            推导类型 运算重载->() {
                回递 & $D.页表[0][0];
            }
        $

        属性(元素类型 &, 尾元)
            公有读 { 回递 $O[$I.长度 - 1]; }
            公有写 { $O[$I.长度 - 1] = 值; }
            推导类型 运算重载->() {
                回递 & $O[$I.长度 - 1];
            }
        $
    公有
        空 后端放入(元素类型 常量 & 值) {
            元素类型 *   指针;
            自然数       偏移 = 0;
            自然数       下标;
            下标 = 指令集::最高置位位索引(长度);

            若 (下标 == 不存在) {
                指针 = 页表[0] = ::分配<元素类型>();
            }
            或 (到达页表交界处 == 否) {
                偏移 = 长度;
                指令集::位测试后位复位(偏移, 下标);
                下标++;
                指针 = 页表[下标];
                指针 += 偏移;
            }
            非{
                指针 = 页表[下标 + 1] = ::分配<元素类型>(自然数(1) << 下标);
            }
            
            长度 = 长度 + 1;
            再初始化(元素类型, 指针[0])(值);
        }

        模板<类 ... 参数>
        空 后端放入(元素类型 常量& 甲, 元素类型 常量 & 乙, 参数 常量 & ... 列表) {
            后端放入(甲);
            后端放入(乙, 列表...);
        }
        空 后端取出(元素类型 & 值) {
            自然数     偏移;
            自然数     页表下标;
            元素类型 * 页;
            长度 = 长度 - 1;
            偏移 = 长度;
            页表下标 = 指令集::最高置位位索引($I.长度);

            若 (页表下标 == 不存在) {
                页 = 页表[0];
                值 = 页[0];
                回收(页);
            }
            非{
                指令集::位测试后位复位(偏移, 页表下标);
                页 = 页表[页表下标 + 1];
                值 = 页[偏移];
                页->~元素类型();

                若 (到达页表交界处) {
                    回收(页, (自然数(1) << 页表下标) * 空间量(元素类型));
                }
            }
        }
        元素类型 后端取出() {
            内存块<元素类型> 内存;
            后端取出(内存);
            回递 内存;
        }
    };

    模板<类 元素类型, 自然数 页长度>
    结构体 运算 {
        运算型卡诺匹斯(元素类型, 页长度);

        元素类型 & 运算重载[](自然数 下标){
            自然数 页表下标 = 指令集::最高置位位索引(下标);
            指令集::位测试后位复位(下标, 页表下标);
            回递 $I.页表[页表下标 + 1][下标];
        }
    };
}

模板<类 元素类型, 自然数 维数 = 1, 自然数 页长度 = 32> 结构体 变长向量;

模板<类 元素类型, 自然数 维数, 自然数 页长度>
结构体 变长向量 : 变长向量<变长向量<元素类型, 维数 - 1, 页长度>, 1, 页长度>{
    变长向量(){}

    模板<类 ... 参数>
    变长向量(参数 常量 & ... 列表): 
        变长向量<变长向量<元素类型, 维数 - 1, 页长度>, 1, 页长度>(列表...){
    }
};

模板<类 元素类型, 自然数 页长度>
结构体 变长向量<元素类型, 1, 页长度> : 变长向量空间::运算<元素类型, 页长度>{
    变长向量() : 
        数据(){
    }

    模板<类 ... 参数>
    变长向量(参数 常量 & ... 列表) :
        数据(列表...){
    }
私有
    变长向量空间::数据<元素类型, 页长度> 数据;
};

