#pragma once
#include"组件/迭代器.hpp"
#include"基本定义/迷你.hpp"
#include"基本定义/属性范式.hpp"

命名空间 静态向量空间{
    三体(类 类型, 自然数 元素个数);

    模板<类 类型, 自然数 元素个数> 结构体 数据{
        卡诺匹斯(类型, 元素个数);
        定义 类型 元素类型;
        类型 元素[元素个数];
        数据() {}

        模板<类 ... 元素列表>
        数据(元素列表 常量 & ...列表) : 
            元素{ (元素列表 & ...)列表... }{
        }
    };

    模板<类 类型, 自然数 元素个数> 结构体 接口{
        卡诺匹斯(类型, 元素个数);
        
        #define 生成(模式,步进,起始,结束)                       \
        此迭代器(模式)                                          \
            推导类型 下一个() {                                 \
                回递 模式 ## 迭代器($I, 下标 + 步进, 边界);     \
            }                                                   \
            运算重载 类型 & (){                                 \
                回递 $D.元素[下标];                             \
            }                                                   \
            类型 & 运算重载= (类型 常量 & 值){                  \
                $D.元素[下标] = 值;                             \
                回递 $D.元素[下标];                             \
            }                                                   \
        $                                                       \
                                                                \
        推导类型 模式 ## 遍历器(                                \
            自然数 起始下标 = 起始,                             \
            自然数 结束下标 = 结束){                            \
            回递 模式 ## 迭代器(此, 起始下标, 结束下标 + 步进); \
        }

        生成(正,  1, 0, 元素个数 - 1);
        生成(反, -1, 元素个数 - 1, 0);
        #undef 生成

        只读属性(自然数, 长度)
            回递 元素个数;
        $
    };

    模板<类 类型, 自然数 元素个数> 结构体 运算{
        运算型卡诺匹斯(类型, 元素个数);
        类型 & 运算重载[](自然数 下标) 常量 {
            回递 $D.元素[下标];
        }
    };
}

模板<类 类型, 自然数 第一维长度, 自然数 ... 剩余维数长度>
结构体 静态向量;

模板<类 类型, 自然数 第一维长度, 自然数 ... 剩余维数长度>
结构体 静态向量 : 静态向量<静态向量<类型, 剩余维数长度...>, 第一维长度>{
    定义 静态向量<静态向量<类型, 剩余维数长度...>, 第一维长度> 父类;
    模板<类 ... 元素列表>
    静态向量(元素列表 常量 & ...列表) :
        父类(列表...) {
    }
};

模板<类 类型, 自然数 第一维长度>
结构体 静态向量<类型, 第一维长度> : 静态向量空间::运算<类型, 第一维长度> {
    定义 类型 本级;
    模板<类 ... 元素列表>
    静态向量(元素列表 常量 & ...列表) :
        数据 { 列表... }{
    }
私有
    静态向量空间::数据<类型, 第一维长度> 数据;
};

模板<类 类型, 类 ... 参数>
静态向量<类型, 1 + 参数数(参数)> $V(类型 常量 & 首参, 参数 常量 & ... 列表) {
    回递 静态向量<类型, 1 + 参数数(参数)>(首参, 列表...);
}

