#pragma once
#include"线性结构/变长向量.hpp"
#include"组件/大小根堆.hpp"

结构体 像素点{
    U16 位置偏移;
    U16 编号;
    U32 颜色;
};

模板<> 内联链接 整数 比较(像素点 常量 & 左, 像素点 常量 & 右) {
    若 (左.位置偏移 == 右.位置偏移){
        回递 整数(I16(左.编号) - I16(右.编号));
    }
    回递 整数(I16(左.位置偏移) - I16(右.位置偏移));
}

结构体 像素组{
    枚举{
        位移得到组下标 = 16,
        每组像素数 = 1 << 位移得到组下标,
        位与得到组偏移 = 每组像素数 - 1,
    };
    定义 变长向量<像素点> 组类型;
    组类型 * 记录;
    U16      长度;
    U16      编号;
    U16      宽;
    U16      高;

    像素组(U16 宽, U16 高) : 
        宽(宽), 高(高){
        长度 = 自然数(宽) * 高 / 每组像素数 + ((自然数(宽) * 高 % 每组像素数) != 0);
        记录 = 分配<组类型>(长度, [](组类型 * 内存, 自然数 下标) {
            再初始化(组类型, 内存[下标])();
        });
        编号 = 0;
    }

    空 添加(U16 X, U16 Y, U32 颜色) {
        自然数 I = 自然数(Y) * 宽 + X;
        自然数 O = I & 位与得到组偏移;
        像素点 P;
        推导类型 & 当前 = 记录[I >> 位移得到组下标];
        P.编号 = 编号;
        P.位置偏移 = O;
        P.颜色 = 颜色;
        当前->后端放入(P);
        大小根堆空间::添加<像素点>(当前, 当前->长度 - 1, P);
        编号 += 1;
    }
    
    模板<类 绘点回调>
    空 取出(绘点回调 回调) {
        循环(自然数 I = 0; I < 长度; I++) {
            推导类型 & 当前 = 记录[I];
            若 (当前->长度 == 0) {
                下轮;
            }
            像素点 像素 = 当前->首元;
            大小根堆空间::取出<像素点>(当前, 当前->长度, 当前->尾元);
            当前->后端取出();

            推导类型 绘制 = [&]() {
                U16 S = I << 位移得到组下标 | 像素.位置偏移;
                U16 Y = S / 宽;
                U16 X = S % 宽;
                回调(X, Y, 像素.颜色);
            };

            只要(当前->长度 != 0) {
                像素点 临时 = 大小根堆空间::取出<像素点>(当前, 当前->长度, 当前->尾元);
                当前->后端取出();
                若 (像素.位置偏移 != 临时.位置偏移) {
                    绘制();
                }
                像素 = 临时;
            }
            绘制();
        }
        编号 = 0;
    }
};
