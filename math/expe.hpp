#ifndef xpack_math_expe
#define xpack_math_expe
#pragma push_macro("xuser")
#undef  xuser
#define xuser mixc::math_expe::inc
#include"define/base_type.hpp"
#include"define/inf.hpp"
#include"macro/xexport.hpp"
#include"math/div.hpp"
#include"utils/mfxx.hpp"
#pragma pop_macro("xuser")

namespace mixc::math_expe{
    constexpr uxx mask_low          = 32 - 1;
    constexpr uxx shift             = 5;
    constexpr f64 lut_ee0_ee31  []  = {1.000000000000000000e+00, 2.718281828459045091e+00, 7.389056098930649441e+00, 2.008553692318766454e+01, 5.459815003314422746e+01, 1.484131591025765640e+02, 4.034287934927349939e+02, 1.096633158428458191e+03, 2.980957987041727006e+03, 8.103083927575380129e+03, 2.202646579480670480e+04, 5.987414171519778343e+04, 1.627547914190038169e+05, 4.424133920089201974e+05, 1.202604284164775882e+06, 3.269017372472108031e+06, 8.886110520507865075e+06, 2.415495275357527638e+07, 6.565996913733044828e+07, 1.784823009631870805e+08, 4.851651954097897619e+08, 1.318815734483213224e+09, 3.584912846131587367e+09, 9.744803446248890680e+09, 2.648912212984343848e+10, 7.200489933738577679e+10, 1.957296094288384936e+11, 5.320482406017978527e+11, 1.446257064291473020e+12, 3.931334297144036011e+12, 1.068647458152444510e+13, 2.904884966524737734e+13, };
    constexpr f64 lut_ee32_ee704[]  = {1.000000000000000000e+00, 7.896296018268056078e+13, 6.235149080811595660e+27, 4.923458286012033263e+41, 3.887708405994568627e+55, 3.069849640644216345e+69, 2.424044149410054833e+83, 1.914097016509259280e+97, 1.511427665004082965e+111, 1.193468025307192564e+125, 9.423976816163424229e+138, 7.441451060972171904e+152, 5.875990038289116240e+166, 4.639855674272511094e+180, 3.663767388609647591e+194, 2.893019184253871395e+208, 2.284413586539694437e+222, 1.803840590747083853e+236, 1.424365927430649631e+250, 1.124721500132732559e+264, 8.881133903158571014e+277, 7.012806227721646385e+291, 5.537519389284386289e+305 };
}

namespace mixc::math_expe::origin{
    inline f64 expe_unsafe(uxx x){
        return lut_ee0_ee31[x & mask_low] * lut_ee32_ee704[x >> shift];
    }

    inline f64 expe(uxx x){
        if (x >= sizeof(lut_ee0_ee31) / sizeof(lut_ee0_ee31[0]) * sizeof(lut_ee32_ee704) / sizeof(lut_ee32_ee704[0])){
            return inc::inf_pos;
        }
        return expe_unsafe(x);
    }

    extern f64 expe_unsafe(f64 x);

    inline f64 expe(f64 x){
        if (x > 700/*max exp*/){
            return inc::inf_pos;
        }
        if (x < -700/*min exp*/){
            return 0;
        }
        else{
            return expe_unsafe(x);
        }
    }
}

#endif

xexport_space(mixc::math_expe::origin)