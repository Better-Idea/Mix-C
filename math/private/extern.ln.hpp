#ifdef xuser
    #undef xuser
#endif

#define xuser mixc::math_ln
#include"define/mfxx.hpp"
#include"define/nan.hpp"
#include"macro/xalign.hpp"
#include"math/const.hpp"

namespace mixc::math_ln{
    f64 ln(f64 x){
        using namespace inc;

        if (x <= 0){
            return nan;
        }

        constexpr f64 lut[][16][2] = {
            {{1.00000000000000000e+00, 0.00000000000000000e+00}, {9.41176470588235294e-01, 6.06246218164348426e-02}, {8.88888888888888889e-01, 1.17783035656383455e-01}, {8.42105263157894737e-01, 1.71850256926659222e-01}, {8.00000000000000000e-01, 2.23143551314209756e-01}, {7.61904761904761905e-01, 2.71933715483641759e-01}, {7.27272727272727273e-01, 3.18453731118534616e-01}, {6.95652173913043478e-01, 3.62905493689368453e-01}, {6.66666666666666667e-01, 4.05465108108164382e-01}, {6.40000000000000000e-01, 4.46287102628419512e-01}, {6.15384615384615385e-01, 4.85507815781700808e-01}, {5.92592592592592593e-01, 5.23248143764547837e-01}, {5.71428571428571429e-01, 5.59615787935422686e-01}, {5.51724137931034483e-01, 5.94707107746692790e-01}, {5.33333333333333333e-01, 6.28608659422374138e-01}, {5.16129032258064516e-01, 6.61398482245365008e-01}, },
            {{1.00000000000000000e+00, 0.00000000000000000e+00}, {9.96108949416342412e-01, 3.89864041565732301e-03}, {9.92248062015503876e-01, 7.78214044205494895e-03}, {9.88416988416988417e-01, 1.16506172199752741e-02}, {9.84615384615384615e-01, 1.55041865359652542e-02}, {9.80842911877394636e-01, 1.93429628431309346e-02}, {9.77099236641221374e-01, 2.31670592815343782e-02}, {9.73384030418250951e-01, 2.69765876982020757e-02}, {9.69696969696969697e-01, 3.07716586667536884e-02}, {9.66037735849056604e-01, 3.45523815066597334e-02}, {9.62406015037593985e-01, 3.83188643021365992e-02}, {9.58801498127340824e-01, 4.20712139206870544e-02}, {9.55223880597014925e-01, 4.58095360312942032e-02}, {9.51672862453531598e-01, 4.95339351222766309e-02}, {9.48148148148148148e-01, 5.32445145188122829e-02}, {9.44649446494464945e-01, 5.69413764001384248e-02}, },
            {{1.00000000000000000e+00, 0.00000000000000000e+00}, {9.99755918965096412e-01, 2.44110827527362709e-04}, {9.99511957052220595e-01, 4.88162079501351189e-04}, {9.99268114174188827e-01, 7.32153784993847474e-04}, {9.99024390243902439e-01, 9.76085973055458896e-04}, {9.98780785174347720e-01, 1.21995867271553884e-03}, {9.98537298878595807e-01, 1.46377191298220746e-03}, {9.98293931269802583e-01, 1.70752572284237239e-03}, {9.98050682261208577e-01, 1.95122013126174944e-03}, {9.97807551766138855e-01, 2.19485516718488321e-03}, {9.97564539698002923e-01, 2.43843085953516774e-03}, {9.97321645970294619e-01, 2.68194723721486712e-03}, {9.97078870496592016e-01, 2.92540432910513605e-03}, {9.96836213190557313e-01, 3.16880216406604040e-03}, {9.96593673965936740e-01, 3.41214077093657772e-03}, {9.96351252736560448e-01, 3.65542017853469778e-03}, },
            {{1.00000000000000000e+00, 0.00000000000000000e+00}, {9.99984741443764591e-01, 1.52586726483623974e-05}, {9.99969483353169154e-01, 3.05171124731863786e-05}, {9.99954225728192374e-01, 4.57753194815768830e-05}, {9.99938968568812939e-01, 6.10332936806385249e-05}, {9.99923711875009536e-01, 7.62910350774755934e-05}, {9.99908455646760856e-01, 9.15485436791920524e-05}, {9.99893199884045588e-01, 1.06805819492891541e-04}, {9.99877944586842426e-01, 1.22062862525677372e-04}, {9.99862689755130063e-01, 1.37319672784652534e-04}, {9.99847435388887194e-01, 1.52576250276919691e-04}, {9.99832181488092514e-01, 1.67832595009581180e-04}, {9.99816928052724721e-01, 1.83088706989739016e-04}, {9.99801675082762514e-01, 1.98344586224494886e-04}, {9.99786422578184592e-01, 2.13600232720950154e-04}, {9.99771170538969657e-01, 2.28855646486205857e-04}, },
            {{1.00000000000000000e+00, 0.00000000000000000e+00}, {9.99999046326593088e-01, 9.53673861659188234e-07}, {9.99998092655005159e-01, 1.90734681382540942e-06}, {9.99997138985236210e-01, 2.86101885650039826e-06}, {9.99996185317286235e-01, 3.81468998968588948e-06}, {9.99995231651155228e-01, 4.76836021338361778e-06}, {9.99994277986843184e-01, 5.72202952759531786e-06}, {9.99993324324350099e-01, 6.67569793232272443e-06}, {9.99992370663675967e-01, 7.62936542756757216e-06}, {9.99991417004820782e-01, 8.58303201333159574e-06}, {9.99990463347784540e-01, 9.53669768961652987e-06}, {9.99989509692567236e-01, 1.04903624564241092e-05}, {9.99988556039168863e-01, 1.14440263137560684e-05}, {9.99987602387589418e-01, 1.23976892616141422e-05}, {9.99986648737828894e-01, 1.33513513000000652e-05}, {9.99985695089887287e-01, 1.43050124289155720e-05}, },
            {{1.00000000000000000e+00, 0.00000000000000000e+00}, {9.99999940395358777e-01, 5.96046429990338562e-08}, {9.99999880790724660e-01, 1.19209282445354457e-07}, {9.99999821186097648e-01, 1.78813918338962226e-07}, {9.99999761581477742e-01, 2.38418550679857587e-07}, {9.99999701976864941e-01, 2.98023179468040963e-07}, {9.99999642372259245e-01, 3.57627804703512778e-07}, {9.99999582767660655e-01, 4.17232426386273455e-07}, {9.99999523163069170e-01, 4.76837044516323418e-07}, {9.99999463558484791e-01, 5.36441659093663091e-07}, {9.99999403953907517e-01, 5.96046270118292896e-07}, {9.99999344349337349e-01, 6.55650877590213258e-07}, {9.99999284744774286e-01, 7.15255481509424599e-07}, {9.99999225140218328e-01, 7.74860081875927344e-07}, {9.99999165535669476e-01, 8.34464678689721916e-07}, {9.99999105931127729e-01, 8.94069271950808738e-07}, },
        };

        auto m      = mf64(x);
        auto sum    = m.real_exp() * ln_2;
        m.real_exp(0);

        // ln(a / b) = ln(a) - ln(b)
        // ln(x) = left:ln(x / a0 / a1 / a2 / ... / an) + right:{ln(a0) + ln(a1) + ln(a2) + ln(an)}
        // 此算法通过迭代让 left 部分等于 ln(1)
        // 查表除以 an 变换成乘以 1.0/an (以除法代替乘法)
        for(uxx i = 0, shift = 48; i < sizeof(lut) / sizeof(lut[0]); i++, shift -= 4){
            auto idx    = m.decimal >> shift;
            auto pair   = lut[i][idx];
            auto mul    = pair[0];
            auto add    = pair[1];
            m          *= mul;
            sum        += add;
        }

        // 由 ln'(x) = 1/x 可知 ln(1 + x) = x when x -> 1/inf 
        // 但实际上 ln(1+x) 是略小于 x 的，下方进行简单的矫正
        auto adjust = mf64(1.12/*经验值*/).real_exp(-52 - 26); 
        auto linear = mf64(1.0).real_exp(-52) - adjust;
        auto rem    = linear * m.decimal;
        auto r      = sum + rem;
        return r;
    }
}

